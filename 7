def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, var7)
    var13 = func6()
    var17 = func7(arg1, var12)
    def func9(arg18, arg19):
        var20 = arg1 + var17
        var21 = var7 + (arg1 ^ 641 | (((arg2 - ((-1626837452 & var12 - (var17 - (((var17 | arg19 ^ arg18 + var13 - var17) + arg18) + var7 | var12) | var13 | var7) ^ arg2 & arg19) ^ var17)) & arg19) & var20))
        result = arg1 ^ arg1 ^ arg19 - var7
        return result
    var22 = func9(arg1, var7)
    var23 = arg1 | var7
    var24 = var13 + var12 | var23 - var23
    var25 = (var22 ^ var7) | var17 | var13
    var26 = ((arg2 & var17) - var13) - var25
    var27 = var7 | 847432296 ^ arg2 | var22
    var28 = var26 & var27 - (var25 | var7)
    var29 = var25 - arg2 - var22 & var7
    var30 = (var23 & var17 | var29) | var26
    if var24 < var24:
        var31 = var29 + (var30 | var25) + var13
    else:
        var31 = (var22 | var12 ^ arg2) + var30
    var32 = var28 - var7
    if arg2 < var26:
        var33 = (var12 & var23 & arg2) & arg2
    else:
        var33 = var27 & var12 + arg2 - var26
    var34 = ((var28 | var32) - var28) | var22
    var35 = var28 | var32 + var12
    var36 = var22 - var28
    result = var26 + var36 - var34
    return result
def func6():
    func4()
    result = len(range(20))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -2
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(10):
        var10 += var11 + (var11 | arg8)
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(41):
        var5 += arg3 + arg4
    return var5
def func7(arg14, arg15):
    def func8(acc, rest):
        var16 = -9 & rest | acc
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 37'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, var7)
    var13 = func6()
    var17 = func7(arg1, var12)
    def func9(arg18, arg19):
        var20 = arg1 + var17
        var21 = var7 + (arg1 ^ 641 | (((arg2 - ((-1626837452 & var12 - (var17 - (((var17 | arg19 ^ arg18 + var13 - var17) + arg18) + var7 | var12) | var13 | var7) ^ arg2 & arg19) ^ var17)) & arg19) & var20))
        result = arg1 ^ arg1 ^ arg19 - var7
        return result
    var22 = func9(arg1, var7)
    var23 = arg1 | var7
    var24 = var13 + var12 | var23 - var23
    var25 = (var22 ^ var7) | var17 | var13
    var26 = ((arg2 & var17) - var13) - var25
    var27 = var7 | 847432296 ^ arg2 | var22
    var28 = var26 & var27 - (var25 | var7)
    var29 = var25 - arg2 - var22 & var7
    var30 = (var23 & var17 | var29) | var26
    if var24 < var24:
        var31 = var29 + (var30 | var25) + var13
    else:
        var31 = (var22 | var12 ^ arg2) + var30
    var32 = var28 - var7
    if arg2 < var26:
        var33 = (var12 & var23 & arg2) & arg2
    else:
        var33 = var27 & var12 + arg2 - var26
    var34 = ((var28 | var32) - var28) | var22
    var35 = var28 | var32 + var12
    var36 = var22 - var28
    result = var26 + var36 - var34
    return result
def func6():
    func4()
    result = len(range(20))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -2
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(10):
        var10 += var11 + (var11 | arg8)
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(41):
        var5 += arg3 + arg4
    return var5
def func7(arg14, arg15):
    def func8(acc, rest):
        var16 = -9 & rest | acc
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 37'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, var7)
    var13 = func6()
    var17 = func7(arg1, var12)
    def func9(arg18, arg19):
        var20 = arg1 + var17
        var21 = var7 + (arg1 ^ 641 | (((arg2 - ((-1626837452 & var12 - (var17 - (((var17 | arg19 ^ arg18 + var13 - var17) + arg18) + var7 | var12) | var13 | var7) ^ arg2 & arg19) ^ var17)) & arg19) & var20))
        result = arg1 ^ arg1 ^ arg19 - var7
        return result
    var22 = func9(arg1, var7)
    var23 = arg1 | var7
    var24 = var13 + var12 | var23 - var23
    var25 = (var22 ^ var7) | var17 | var13
    var26 = ((arg2 & var17) - var13) - var25
    var27 = var7 | 847432296 ^ arg2 | var22
    var28 = var26 & var27 - (var25 | var7)
    var29 = var25 - arg2 - var22 & var7
    var30 = (var23 & var17 | var29) | var26
    if var24 < var24:
        var31 = var29 + (var30 | var25) + var13
    else:
        var31 = (var22 | var12 ^ arg2) + var30
    var32 = var28 - var7
    if arg2 < var26:
        var33 = (var12 & var23 & arg2) & arg2
    else:
        var33 = var27 & var12 + arg2 - var26
    var34 = ((var28 | var32) - var28) | var22
    var35 = var28 | var32 + var12
    var36 = var22 - var28
    result = var26 + var36 - var34
    return result
def func6():
    func4()
    result = len(range(20))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -2
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(10):
        var10 += var11 + (var11 | arg8)
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(41):
        var5 += arg3 + arg4
    return var5
def func7(arg14, arg15):
    def func8(acc, rest):
        var16 = -9 & rest | acc
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 37'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var12 = func3(arg2, var7)
    var13 = func6()
    var17 = func7(arg1, var12)
    def func9(arg18, arg19):
        var20 = arg1 + var17
        var21 = var7 + (arg1 ^ 641 | (((arg2 - ((-1626837452 & var12 - (var17 - (((var17 | arg19 ^ arg18 + var13 - var17) + arg18) + var7 | var12) | var13 | var7) ^ arg2 & arg19) ^ var17)) & arg19) & var20))
        result = arg1 ^ arg1 ^ arg19 - var7
        return result
    var22 = func9(arg1, var7)
    var23 = arg1 | var7
    var24 = var13 + var12 | var23 - var23
    var25 = (var22 ^ var7) | var17 | var13
    var26 = ((arg2 & var17) - var13) - var25
    var27 = var7 | 847432296 ^ arg2 | var22
    var28 = var26 & var27 - (var25 | var7)
    var29 = var25 - arg2 - var22 & var7
    var30 = (var23 & var17 | var29) | var26
    if var24 < var24:
        var31 = var29 + (var30 | var25) + var13
    else:
        var31 = (var22 | var12 ^ arg2) + var30
    var32 = var28 - var7
    if arg2 < var26:
        var33 = (var12 & var23 & arg2) & arg2
    else:
        var33 = var27 & var12 + arg2 - var26
    var34 = ((var28 | var32) - var28) | var22
    var35 = var28 | var32 + var12
    var36 = var22 - var28
    result = var26 + var36 - var34
    return result
def func6():
    func4()
    result = len(range(20))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -2
def func3(arg8, arg9):
    var10 = 0
    for var11 in range(10):
        var10 += var11 + (var11 | arg8)
    return var10
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(41):
        var5 += arg3 + arg4
    return var5
def func7(arg14, arg15):
    def func8(acc, rest):
        var16 = -9 & rest | acc
        if acc == 0:
            return var16
        else:
            result = func8(acc - 1, var16)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 37'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
